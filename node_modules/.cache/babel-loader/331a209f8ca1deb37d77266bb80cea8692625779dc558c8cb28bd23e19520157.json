{"ast":null,"code":"import { ApolloClient, InMemoryCache, split, HttpLink } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql'\n});\nconst wsLink = new GraphQLWsLink(createClient({\n  url: 'ws://localhost:4000/graphql'\n}));\n\n// The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\n\n// ...code from the above example goes here...\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","split","HttpLink","getMainDefinition","GraphQLWsLink","createClient","httpLink","uri","wsLink","url","splitLink","_ref","query","definition","kind","operation","client","link","cache"],"sources":["D:/JavaScript/Graphql_Patika/example5/client/src/apollo.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, split, HttpLink } from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\r\nimport { createClient } from 'graphql-ws';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: 'http://localhost:4000/graphql'\r\n});\r\n\r\nconst wsLink = new GraphQLWsLink(createClient({\r\n  url: 'ws://localhost:4000/graphql',\r\n}));\r\n\r\n// The split function takes three parameters:\r\n//\r\n// * A function that's called for each operation to execute\r\n// * The Link to use for an operation if the function returns a \"truthy\" value\r\n// * The Link to use for an operation if the function returns a \"falsy\" value\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\n// ...code from the above example goes here...\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default client;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAC7E,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,YAAY,QAAQ,YAAY;AAEzC,MAAMC,QAAQ,GAAG,IAAIJ,QAAQ,CAAC;EAC5BK,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAG,IAAIJ,aAAa,CAACC,YAAY,CAAC;EAC5CI,GAAG,EAAE;AACP,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGT,KAAK,CACrBU,IAAA,IAAe;EAAA,IAAd;IAAEC;EAAM,CAAC,GAAAD,IAAA;EACR,MAAME,UAAU,GAAGV,iBAAiB,CAACS,KAAK,CAAC;EAC3C,OACEC,UAAU,CAACC,IAAI,KAAK,qBAAqB,IACzCD,UAAU,CAACE,SAAS,KAAK,cAAc;AAE3C,CAAC,EACDP,MAAM,EACNF,QAAQ,CACT;;AAED;;AAEA,MAAMU,MAAM,GAAG,IAAIjB,YAAY,CAAC;EAC9BkB,IAAI,EAAEP,SAAS;EACfQ,KAAK,EAAE,IAAIlB,aAAa;AAC1B,CAAC,CAAC;AAEF,eAAegB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}